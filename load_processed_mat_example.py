"""
Example script showing how to load and use the processed MAT files
generated by foot_overlay_creator.py

This demonstrates that the processed thermal data is saved and can be
reloaded for further analysis without needing to reprocess.
"""

import scipy.io
import numpy as np
import matplotlib.pyplot as plt

def load_processed_mat_files(file_key="pnt2"):
    """
    Load the processed MAT files for a given file key
    """
    print(f"Loading processed MAT files for {file_key}...")
    
    # Load the comprehensive processed data
    processed_data = scipy.io.loadmat(f"output_overlay_system/processed_mat_files/processed_{file_key}.mat")
    
    # Load individual foot data
    left_data = scipy.io.loadmat(f"output_overlay_system/processed_mat_files/left_foot_{file_key}.mat")
    right_data = scipy.io.loadmat(f"output_overlay_system/processed_mat_files/right_foot_processed_{file_key}.mat")
    
    return processed_data, left_data, right_data

def analyze_processed_data(processed_data, left_data, right_data):
    """
    Analyze the loaded processed thermal data
    """
    print("\n=== PROCESSED DATA ANALYSIS ===")
    
    # Extract thermal arrays
    left_thermal = processed_data['left_foot_original']
    right_thermal = processed_data['right_foot_scaled']
    left_canvas = processed_data['left_canvas']
    right_canvas = processed_data['right_canvas']
    
    # Processing info
    info = processed_data['processing_info'][0, 0]
    rotation_angle = float(info['rotation_angle'])
    scale_x = float(info['scale_x'])
    scale_y = float(info['scale_y'])
    overlap_score = float(info['overlap_score'])
    
    print(f"Original file: {info['original_file'][0]}")
    print(f"Processing timestamp: {info['processing_timestamp'][0]}")
    print(f"Rotation applied: {rotation_angle:.1f}°")
    print(f"Scaling factors: x={scale_x:.3f}, y={scale_y:.3f}")
    print(f"Overlap score: {overlap_score:.3f}")
    
    # Thermal data statistics
    left_temps = left_thermal[~np.isnan(left_thermal)]
    right_temps = right_thermal[~np.isnan(right_thermal)]
    
    print(f"\nLeft foot thermal data:")
    print(f"  Shape: {left_thermal.shape}")
    print(f"  Temperature range: {np.min(left_temps):.1f}°C to {np.max(left_temps):.1f}°C")
    print(f"  Mean temperature: {np.mean(left_temps):.1f}°C")
    
    print(f"\nRight foot thermal data (processed):")
    print(f"  Shape: {right_thermal.shape}")
    print(f"  Temperature range: {np.min(right_temps):.1f}°C to {np.max(right_temps):.1f}°C")
    print(f"  Mean temperature: {np.mean(right_temps):.1f}°C")
    
    return {
        'left_thermal': left_thermal,
        'right_thermal': right_thermal,
        'left_canvas': left_canvas,
        'right_canvas': right_canvas,
        'processing_info': {
            'rotation': rotation_angle,
            'scale_x': scale_x,
            'scale_y': scale_y,
            'overlap': overlap_score
        }
    }

def create_visualization_from_saved_data(data):
    """
    Create a visualization using the saved processed data
    """
    print("\n=== CREATING VISUALIZATION FROM SAVED DATA ===")
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))
    
    # Left foot
    im1 = ax1.imshow(data['left_canvas'], cmap='hot')
    ax1.set_title('Left Foot (from saved MAT)', fontweight='bold')
    ax1.axis('off')
    plt.colorbar(im1, ax=ax1, fraction=0.046, pad=0.04)
    
    # Right foot
    im2 = ax2.imshow(data['right_canvas'], cmap='hot')
    ax2.set_title('Right Foot Processed (from saved MAT)', fontweight='bold')
    ax2.axis('off')
    plt.colorbar(im2, ax=ax2, fraction=0.046, pad=0.04)
    
    info = data['processing_info']
    fig.suptitle(f'Loaded Processed Data - Rotation: {info["rotation"]:.1f}°, Scale: {info["scale_x"]:.3f}x{info["scale_y"]:.3f}', 
                 fontsize=14, fontweight='bold')
    
    plt.tight_layout()
    plt.savefig('output_overlay_system/test_loaded_processed_data.png', dpi=300, bbox_inches='tight')
    print("Test visualization saved to: output_overlay_system/test_loaded_processed_data.png")
    plt.show()

def main():
    """
    Main function demonstrating how to work with saved processed MAT files
    """
    try:
        # Load the processed data
        processed_data, left_data, right_data = load_processed_mat_files("pnt2")
        
        # Analyze the data
        analyzed_data = analyze_processed_data(processed_data, left_data, right_data)
        
        # Create visualization
        create_visualization_from_saved_data(analyzed_data)
        
        print("\n✅ Successfully loaded and analyzed processed thermal data!")
        print("This demonstrates that your processed foot thermal data is safely saved")
        print("and can be reloaded for further analysis without reprocessing.")
        
    except FileNotFoundError as e:
        print(f"❌ Error: Could not find processed MAT files. {e}")
        print("Make sure to run foot_overlay_creator.py first with SAVE_PROCESSED_MAT_FILES = True")
    except Exception as e:
        print(f"❌ Error loading processed data: {e}")

if __name__ == "__main__":
    main()